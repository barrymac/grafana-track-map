{"version":3,"sources":["../src/flatten.js"],"names":["test","console","log","JSON","unflatten","data","Object","Array","isArray","regex","resultholder","p","cur","prop","m","exec","flatten","result","recurse","i","l","length","isEmpty"],"mappings":";;;;;AAAA;;;;;AAKO,aAASA,IAAT,GAAgB;AACnBC,gBAAQC,GAAR,CAAY,MAAZ;AACH;;oBAFeF,I;;;;;AAIhBG,iBAAKC,SAAL,GAAiB,UAASC,IAAT,EAAe;AAC5B;;AACA,oBAAIC,OAAOD,IAAP,MAAiBA,IAAjB,IAAyBE,MAAMC,OAAN,CAAcH,IAAd,CAA7B,EACI,OAAOA,IAAP;AACJ,oBAAII,QAAQ,2BAAZ;AAAA,oBACIC,eAAe,EADnB;AAEA,qBAAK,IAAIC,CAAT,IAAcN,IAAd,EAAoB;AAChB,wBAAIO,MAAMF,YAAV;AAAA,wBACIG,OAAO,EADX;AAAA,wBAEIC,CAFJ;AAGA,2BAAOA,IAAIL,MAAMM,IAAN,CAAWJ,CAAX,CAAX,EAA0B;AACtBC,8BAAMA,IAAIC,IAAJ,MAAcD,IAAIC,IAAJ,IAAaC,EAAE,CAAF,IAAO,EAAP,GAAY,EAAvC,CAAN;AACAD,+BAAOC,EAAE,CAAF,KAAQA,EAAE,CAAF,CAAf;AACH;AACDF,wBAAIC,IAAJ,IAAYR,KAAKM,CAAL,CAAZ;AACH;AACD,uBAAOD,aAAa,EAAb,CAAP;AACH,aAjBD;;AAmBAP,iBAAKa,OAAL,GAAe,UAASX,IAAT,EAAe;AAC1B,oBAAIY,SAAS,EAAb;AACA,yBAASC,OAAT,CAAkBN,GAAlB,EAAuBC,IAAvB,EAA6B;AACzB,wBAAIP,OAAOM,GAAP,MAAgBA,GAApB,EAAyB;AACrBK,+BAAOJ,IAAP,IAAeD,GAAf;AACH,qBAFD,MAEO,IAAIL,MAAMC,OAAN,CAAcI,GAAd,CAAJ,EAAwB;AAC1B,6BAAI,IAAIO,IAAE,CAAN,EAASC,IAAER,IAAIS,MAAnB,EAA2BF,IAAEC,CAA7B,EAAgCD,GAAhC;AACID,oCAAQN,IAAIO,CAAJ,CAAR,EAAgBN,OAAO,GAAP,GAAaM,CAAb,GAAiB,GAAjC;AADJ,yBAED,IAAIC,KAAK,CAAT,EACIH,OAAOJ,IAAP,IAAe,EAAf;AACP,qBALM,MAKA;AACH,4BAAIS,UAAU,IAAd;AACA,6BAAK,IAAIX,CAAT,IAAcC,GAAd,EAAmB;AACfU,sCAAU,KAAV;AACAJ,oCAAQN,IAAID,CAAJ,CAAR,EAAgBE,OAAOA,OAAK,GAAL,GAASF,CAAhB,GAAoBA,CAApC;AACH;AACD,4BAAIW,OAAJ,EACIL,OAAOJ,IAAP,IAAe,EAAf;AACP;AACJ;AACDK,wBAAQb,IAAR,EAAc,EAAd;AACA,uBAAOY,MAAP;AACH,aAtBD","file":"flatten.js","sourcesContent":["/**\n * JSON flatten/unflatten utils.\n * \n */\n\nexport function test() {\n    console.log(\"test\");\n}\n\nJSON.unflatten = function(data) {\n    \"use strict\";\n    if (Object(data) !== data || Array.isArray(data))\n        return data;\n    var regex = /\\.?([^.\\[\\]]+)|\\[(\\d+)\\]/g,\n        resultholder = {};\n    for (var p in data) {\n        var cur = resultholder,\n            prop = \"\",\n            m;\n        while (m = regex.exec(p)) {\n            cur = cur[prop] || (cur[prop] = (m[2] ? [] : {}));\n            prop = m[2] || m[1];\n        }\n        cur[prop] = data[p];\n    }\n    return resultholder[\"\"];\n};\n\nJSON.flatten = function(data) {\n    var result = {};\n    function recurse (cur, prop) {\n        if (Object(cur) !== cur) {\n            result[prop] = cur;\n        } else if (Array.isArray(cur)) {\n             for(var i=0, l=cur.length; i<l; i++)\n                 recurse(cur[i], prop + \"[\" + i + \"]\");\n            if (l == 0)\n                result[prop] = [];\n        } else {\n            var isEmpty = true;\n            for (var p in cur) {\n                isEmpty = false;\n                recurse(cur[p], prop ? prop+\".\"+p : p);\n            }\n            if (isEmpty)\n                result[prop] = {};\n        }\n    }\n    recurse(data, \"\");\n    return result;\n}"]}